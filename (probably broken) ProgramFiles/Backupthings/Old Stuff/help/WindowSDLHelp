Help on class WindowSDL in module kivy.core.window.window_sdl2:

class WindowSDL(kivy.core.window.WindowBase)
 |  WindowSDL(**kwargs)
 |  
 |  WindowBase is an abstract window widget for any window implementation.
 |  
 |  :Parameters:
 |      `borderless`: str, one of ('0', '1')
 |          Set the window border state. Check the
 |          :mod:`~kivy.config` documentation for a
 |          more detailed explanation on the values.
 |      `fullscreen`: str, one of ('0', '1', 'auto', 'fake')
 |          Make the window fullscreen. Check the
 |          :mod:`~kivy.config` documentation for a
 |          more detailed explanation on the values.
 |      `width`: int
 |          Width of the window.
 |      `height`: int
 |          Height of the window.
 |      `minimum_width`: int
 |          Minimum width of the window (only works for sdl2 window provider).
 |      `minimum_height`: int
 |          Minimum height of the window (only works for sdl2 window provider).
 |      `allow_screensaver`: bool
 |          Allow the device to show a screen saver, or to go to sleep
 |          on mobile devices. Defaults to True. Only works for sdl2 window
 |          provider.
 |  
 |  :Events:
 |      `on_motion`: etype, motionevent
 |          Fired when a new :class:`~kivy.input.motionevent.MotionEvent` is
 |          dispatched
 |      `on_touch_down`:
 |          Fired when a new touch event is initiated.
 |      `on_touch_move`:
 |          Fired when an existing touch event changes location.
 |      `on_touch_up`:
 |          Fired when an existing touch event is terminated.
 |      `on_draw`:
 |          Fired when the :class:`Window` is being drawn.
 |      `on_flip`:
 |          Fired when the :class:`Window` GL surface is being flipped.
 |      `on_rotate`: rotation
 |          Fired when the :class:`Window` is being rotated.
 |      `on_close`:
 |          Fired when the :class:`Window` is closed.
 |      `on_request_close`:
 |          Fired when the event loop wants to close the window, or if the
 |          escape key is pressed and `exit_on_escape` is `True`. If a function
 |          bound to this event returns `True`, the window will not be closed.
 |          If the the event is triggered because of the keyboard escape key,
 |          the keyword argument `source` is dispatched along with a value of
 |          `keyboard` to the bound functions.
 |  
 |          .. versionadded:: 1.9.0
 |  
 |      `on_cursor_enter`:
 |          Fired when the cursor enters the window.
 |  
 |          .. versionadded:: 1.9.1
 |  
 |      `on_cursor_leave`:
 |          Fired when the cursor leaves the window.
 |  
 |          .. versionadded:: 1.9.1
 |  
 |      `on_minimize`:
 |          Fired when the window is minimized.
 |  
 |          .. versionadded:: 1.10.0
 |  
 |      `on_maximize`:
 |          Fired when the window is maximized.
 |  
 |          .. versionadded:: 1.10.0
 |  
 |      `on_restore`:
 |          Fired when the window is restored.
 |  
 |          .. versionadded:: 1.10.0
 |  
 |      `on_hide`:
 |          Fired when the window is hidden.
 |  
 |          .. versionadded:: 1.10.0
 |  
 |      `on_show`:
 |          Fired when when the window is shown.
 |  
 |          .. versionadded:: 1.10.0
 |  
 |      `on_keyboard`: key, scancode, codepoint, modifier
 |          Fired when the keyboard is used for input.
 |  
 |          .. versionchanged:: 1.3.0
 |              The *unicode* parameter has been deprecated in favor of
 |              codepoint, and will be removed completely in future versions.
 |  
 |      `on_key_down`: key, scancode, codepoint, modifier
 |          Fired when a key pressed.
 |  
 |          .. versionchanged:: 1.3.0
 |              The *unicode* parameter has been deprecated in favor of
 |              codepoint, and will be removed completely in future versions.
 |  
 |      `on_key_up`: key, scancode, codepoint
 |          Fired when a key is released.
 |  
 |          .. versionchanged:: 1.3.0
 |              The *unicode* parameter has be deprecated in favor of
 |              codepoint, and will be removed completely in future versions.
 |  
 |      `on_dropfile`: str
 |          Fired when a file is dropped on the application.
 |  
 |          .. note::
 |              This event doesn't work for apps with elevated permissions,
 |              because the OS API calls are filtered. Check issue
 |              `#4999 <https://github.com/kivy/kivy/issues/4999>`_ for
 |              pointers to workarounds.
 |  
 |      `on_memorywarning`:
 |          Fired when the platform have memory issue (iOS / Android mostly)
 |          You can listen to this one, and clean whatever you can.
 |  
 |          .. versionadded:: 1.9.0
 |  
 |      `on_textedit(self, text)`:
 |          Fired when inputting with IME.
 |          The string inputting with IME is set as the parameter of
 |          this event.
 |  
 |          .. versionadded:: 1.10.1
 |  
 |  Method resolution order:
 |      WindowSDL
 |      kivy.core.window.WindowBase
 |      kivy._event.EventDispatcher
 |      kivy._event.ObjectWithUid
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  close(self)
 |      Close the window
 |  
 |  create_window(self, *largs)
 |      Will create the main window and configure it.
 |      
 |      .. warning::
 |          This method is called automatically at runtime. If you call it, it
 |          will recreate a RenderContext and Canvas. This means you'll have a
 |          new graphics tree, and the old one will be unusable.
 |      
 |          This method exist to permit the creation of a new OpenGL context
 |          AFTER closing the first one. (Like using runTouchApp() and
 |          stopTouchApp()).
 |      
 |          This method has only been tested in a unittest environment and
 |          is not suitable for Applications.
 |      
 |          Again, don't use this method unless you know exactly what you are
 |          doing!
 |  
 |  do_pause(self)
 |  
 |  flip(self)
 |      Flip between buffers
 |  
 |  get_window_info(self)
 |  
 |  grab_mouse(self)
 |      Grab mouse - so won't leave window
 |      
 |      .. versionadded:: 1.10.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider.
 |  
 |  hide(self)
 |      Hides the window. This method should be used on desktop
 |      platforms only.
 |      
 |      .. versionadded:: 1.9.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider and is currently
 |          only supported on desktop platforms.
 |  
 |  mainloop(self)
 |  
 |  map_key(self, original_key, new_key)
 |  
 |  maximize(self)
 |      Maximizes the window. This method should be used on desktop
 |      platforms only.
 |      
 |      .. versionadded:: 1.9.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider and is currently
 |          only supported on desktop platforms.
 |  
 |  minimize(self)
 |      Minimizes the window. This method should be used on desktop
 |      platforms only.
 |      
 |      .. versionadded:: 1.9.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider and is currently
 |          only supported on desktop platforms.
 |  
 |  raise_window(self)
 |      Raise the window. This method should be used on desktop
 |      platforms only.
 |      
 |      .. versionadded:: 1.9.1
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider and is currently
 |          only supported on desktop platforms.
 |  
 |  release_keyboard(self, *largs)
 |      .. versionadded:: 1.0.4
 |      
 |      Internal method for the widget to release the real-keyboard. Check
 |      :meth:`request_keyboard` to understand how it works.
 |  
 |  request_keyboard(self, callback, target, input_type='text')
 |      .. versionadded:: 1.0.4
 |      
 |      Internal widget method to request the keyboard. This method is rarely
 |      required by the end-user as it is handled automatically by the
 |      :class:`~kivy.uix.textinput.TextInput`. We expose it in case you want
 |      to handle the keyboard manually for unique input scenarios.
 |      
 |      A widget can request the keyboard, indicating a callback to call
 |      when the keyboard is released (or taken by another widget).
 |      
 |      :Parameters:
 |          `callback`: func
 |              Callback that will be called when the keyboard is
 |              closed. This can be because somebody else requested the
 |              keyboard or the user closed it.
 |          `target`: Widget
 |              Attach the keyboard to the specified `target`. This should be
 |              the widget that requested the keyboard. Ensure you have a
 |              different target attached to each keyboard if you're working in
 |              a multi user mode.
 |      
 |              .. versionadded:: 1.0.8
 |      
 |          `input_type`: string
 |              Choose the type of soft keyboard to request. Can be one of
 |              'text', 'number', 'url', 'mail', 'datetime', 'tel', 'address'.
 |      
 |              .. note::
 |      
 |                  `input_type` is currently only honored on mobile devices.
 |      
 |              .. versionadded:: 1.8.0
 |      
 |      :Return:
 |          An instance of :class:`Keyboard` containing the callback, target,
 |          and if the configuration allows it, a
 |          :class:`~kivy.uix.vkeyboard.VKeyboard` instance attached as a
 |          *.widget* property.
 |      
 |      .. note::
 |      
 |          The behavior of this function is heavily influenced by the current
 |          `keyboard_mode`. Please see the Config's
 |          :ref:`configuration tokens <configuration-tokens>` section for
 |          more information.
 |  
 |  restore(self)
 |      Restores the size and position of a maximized or minimized window.
 |      This method should be used on desktop platforms only.
 |      
 |      .. versionadded:: 1.9.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider and is currently
 |          only supported on desktop platforms.
 |  
 |  screenshot(self, *largs, **kwargs)
 |      Save the actual displayed image to a file.
 |  
 |  set_icon(self, filename)
 |      Set the icon of the window.
 |      
 |      .. versionadded:: 1.0.5
 |  
 |  set_system_cursor(self, cursor_name)
 |      Set type of a mouse cursor in the Window.
 |      
 |      It can be one of 'arrow', 'ibeam', 'wait', 'crosshair', 'wait_arrow',
 |      'size_nwse', 'size_nesw', 'size_we', 'size_ns', 'size_all', 'no', or
 |      'hand'.
 |      
 |      On some platforms there might not be a specific cursor supported and
 |      such an option falls back to one of the substitutable alternatives:
 |      
 |      +------------+-----------+------------+-----------+---------------+
 |      |            | Windows   | MacOS      | Linux X11 | Linux Wayland |
 |      +============+===========+============+===========+===============+
 |      | arrow      | arrow     | arrow      | arrow     | arrow         |
 |      +------------+-----------+------------+-----------+---------------+
 |      | ibeam      | ibeam     | ibeam      | ibeam     | ibeam         |
 |      +------------+-----------+------------+-----------+---------------+
 |      | wait       | wait      | arrow      | wait      | wait          |
 |      +------------+-----------+------------+-----------+---------------+
 |      | crosshair  | crosshair | crosshair  | crosshair | hand          |
 |      +------------+-----------+------------+-----------+---------------+
 |      | wait_arrow | arrow     | arrow      | wait      | wait          |
 |      +------------+-----------+------------+-----------+---------------+
 |      | size_nwse  | size_nwse | size_all   | size_all  | hand          |
 |      +------------+-----------+------------+-----------+---------------+
 |      | size_nesw  | size_nesw | size_all   | size_all  | hand          |
 |      +------------+-----------+------------+-----------+---------------+
 |      | size_we    | size_we   | size_we    | size_we   | hand          |
 |      +------------+-----------+------------+-----------+---------------+
 |      | size_ns    | size_ns   | size_ns    | size_ns   | hand          |
 |      +------------+-----------+------------+-----------+---------------+
 |      | size_all   | size_all  | size_all   | size_all  | hand          |
 |      +------------+-----------+------------+-----------+---------------+
 |      | no         | no        | no         | no        | ibeam         |
 |      +------------+-----------+------------+-----------+---------------+
 |      | hand       | hand      | hand       | hand      | hand          |
 |      +------------+-----------+------------+-----------+---------------+
 |      
 |      .. versionadded:: 1.10.1
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider and is currently
 |          only supported on desktop platforms.
 |  
 |  set_title(self, title)
 |      Set the window title.
 |      
 |      .. versionadded:: 1.0.5
 |  
 |  show(self)
 |      Shows the window. This method should be used on desktop
 |      platforms only.
 |      
 |      .. versionadded:: 1.9.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider and is currently
 |          only supported on desktop platforms.
 |  
 |  toggle_fullscreen(self)
 |      Toggle between fullscreen and windowed mode.
 |      
 |      .. deprecated:: 1.9.0
 |          Use :attr:`fullscreen` instead.
 |  
 |  ungrab_mouse(self)
 |      Ungrab mouse
 |      
 |      .. versionadded:: 1.10.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider.
 |  
 |  unmap_key(self, key)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from kivy.core.window.WindowBase:
 |  
 |  add_widget(self, widget, canvas=None)
 |      Add a widget to a window
 |  
 |  clear(self)
 |      Clear the window with the background color
 |  
 |  configure_keyboards(self)
 |  
 |  dpi = <kivy.utils.reify object>
 |  get_gl_backend_name(self)
 |      Returns the gl backend that will or is used with this window.
 |  
 |  get_parent_layout(self)
 |  
 |  get_parent_window(self)
 |  
 |  get_root_window(self)
 |  
 |  get_window_matrix(self, x=0, y=0)
 |  
 |  initialize_gl(self)
 |  
 |  on_close(self, *largs)
 |      Event called when the window is closed.
 |  
 |  on_cursor_enter(self, *largs)
 |      Event called when the cursor enters the window.
 |      
 |      .. versionadded:: 1.9.1
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider.
 |  
 |  on_cursor_leave(self, *largs)
 |      Event called when the cursor leaves the window.
 |      
 |      .. versionadded:: 1.9.1
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider.
 |  
 |  on_draw(self)
 |  
 |  on_dropfile(self, filename)
 |      Event called when a file is dropped on the application.
 |      
 |      .. warning::
 |      
 |          This event currently works with sdl2 window provider, on pygame
 |          window provider and OS X with a patched version of pygame.
 |          This event is left in place for further evolution
 |          (ios, android etc.)
 |      
 |      .. versionadded:: 1.2.0
 |  
 |  on_flip(self)
 |      Flip between buffers (event)
 |  
 |  on_hide(self, *largs)
 |      Event called when the window is hidden.
 |      
 |      .. versionadded:: 1.10.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider.
 |  
 |  on_joy_axis(self, stickid, axisid, value)
 |      Event called when a joystick has a stick or other axis moved.
 |      
 |      .. versionadded:: 1.9.0
 |  
 |  on_joy_ball(self, stickid, ballid, xvalue, yvalue)
 |      Event called when a joystick has a ball moved.
 |      
 |      .. versionadded:: 1.9.0
 |  
 |  on_joy_button_down(self, stickid, buttonid)
 |      Event called when a joystick has a button pressed.
 |      
 |      .. versionadded:: 1.9.0
 |  
 |  on_joy_button_up(self, stickid, buttonid)
 |      Event called when a joystick has a button released.
 |      
 |      .. versionadded:: 1.9.0
 |  
 |  on_joy_hat(self, stickid, hatid, value)
 |      Event called when a joystick has a hat/dpad moved.
 |      
 |      .. versionadded:: 1.9.0
 |  
 |  on_key_down(self, key, scancode=None, codepoint=None, modifier=None, **kwargs)
 |      Event called when a key is down (same arguments as on_keyboard)
 |  
 |  on_key_up(self, key, scancode=None, codepoint=None, modifier=None, **kwargs)
 |      Event called when a key is released (same arguments as on_keyboard).
 |  
 |  on_keyboard(self, key, scancode=None, codepoint=None, modifier=None, **kwargs)
 |      Event called when keyboard is used.
 |      
 |      .. warning::
 |          Some providers may omit `scancode`, `codepoint` and/or `modifier`.
 |  
 |  on_maximize(self, *largs)
 |      Event called when the window is maximized.
 |      
 |      .. versionadded:: 1.10.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider.
 |  
 |  on_memorywarning(self)
 |      Event called when the platform have memory issue.
 |      Your goal is to clear the cache in your app as much as you can,
 |      release unused widgets, do garbage collection etc.
 |      
 |      Currently, this event is fired only from the SDL2 provider, for
 |      iOS and Android.
 |      
 |      .. versionadded:: 1.9.0
 |  
 |  on_minimize(self, *largs)
 |      Event called when the window is minimized.
 |      
 |      .. versionadded:: 1.10.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider.
 |  
 |  on_motion(self, etype, me)
 |      Event called when a Motion Event is received.
 |      
 |      :Parameters:
 |          `etype`: str
 |              One of 'begin', 'update', 'end'
 |          `me`: :class:`~kivy.input.motionevent.MotionEvent`
 |              The Motion Event currently dispatched.
 |  
 |  on_mouse_down(self, x, y, button, modifiers)
 |      Event called when the mouse is used (pressed/released).
 |  
 |  on_mouse_move(self, x, y, modifiers)
 |      Event called when the mouse is moved with buttons pressed.
 |  
 |  on_mouse_up(self, x, y, button, modifiers)
 |      Event called when the mouse is moved with buttons pressed.
 |  
 |  on_move(self)
 |  
 |  on_pre_resize(self, width, height)
 |  
 |  on_request_close(self, *largs, **kwargs)
 |      Event called before we close the window. If a bound function returns
 |      `True`, the window will not be closed. If the the event is triggered
 |      because of the keyboard escape key, the keyword argument `source` is
 |      dispatched along with a value of `keyboard` to the bound functions.
 |      
 |      .. warning::
 |          When the bound function returns True the window will not be closed,
 |          so use with care because the user would not be able to close the
 |          program, even if the red X is clicked.
 |  
 |  on_resize(self, width, height)
 |      Event called when the window is resized.
 |  
 |  on_restore(self, *largs)
 |      Event called when the window is restored.
 |      
 |      .. versionadded:: 1.10.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider.
 |  
 |  on_rotate(self, rotation)
 |      Event called when the screen has been rotated.
 |  
 |  on_shape_color_key(self, instane, value)
 |  
 |  on_shape_cutoff(self, instane, value)
 |  
 |  on_shape_image(self, instane, value)
 |  
 |  on_show(self, *largs)
 |      Event called when the window is shown.
 |      
 |      .. versionadded:: 1.10.0
 |      
 |      .. note::
 |          This feature requires the SDL2 window provider.
 |  
 |  on_textedit(self, text)
 |      Event called when inputting with IME.
 |      The string inputting with IME is set as the parameter of
 |      this event.
 |      
 |      .. versionadded:: 1.10.1
 |  
 |  on_textinput(self, text)
 |      Event called when text: i.e. alpha numeric non control keys or set
 |      of keys is entered. As it is not guaranteed whether we get one
 |      character or multiple ones, this event supports handling multiple
 |      characters.
 |      
 |      .. versionadded:: 1.9.0
 |  
 |  on_touch_down(self, touch)
 |      Event called when a touch down event is initiated.
 |      
 |      .. versionchanged:: 1.9.0
 |          The touch `pos` is now transformed to window coordinates before
 |          this method is called. Before, the touch `pos` coordinate would be
 |          `(0, 0)` when this method was called.
 |  
 |  on_touch_move(self, touch)
 |      Event called when a touch event moves (changes location).
 |      
 |      .. versionchanged:: 1.9.0
 |          The touch `pos` is now transformed to window coordinates before
 |          this method is called. Before, the touch `pos` coordinate would be
 |          `(0, 0)` when this method was called.
 |  
 |  on_touch_up(self, touch)
 |      Event called when a touch event is released (terminated).
 |      
 |      .. versionchanged:: 1.9.0
 |          The touch `pos` is now transformed to window coordinates before
 |          this method is called. Before, the touch `pos` coordinate would be
 |          `(0, 0)` when this method was called.
 |  
 |  register(self)
 |  
 |  release_all_keyboards(self)
 |      .. versionadded:: 1.0.8
 |      
 |      This will ensure that no virtual keyboard / system keyboard is
 |      requested. All instances will be closed.
 |  
 |  remove_widget(self, widget)
 |      Remove a widget from a window
 |  
 |  set_vkeyboard_class(self, cls)
 |      .. versionadded:: 1.0.8
 |      
 |      Set the VKeyboard class to use. If set to `None`, it will use the
 |      :class:`kivy.uix.vkeyboard.VKeyboard`.
 |  
 |  to_widget(self, x, y, initial=True, relative=False)
 |  
 |  to_window(self, x, y, initial=True, relative=False)
 |  
 |  update_childsize(self, childs=None)
 |  
 |  update_viewport(self)
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from kivy.core.window.WindowBase:
 |  
 |  __new__(cls, **kwargs)
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from kivy.core.window.WindowBase:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __self__
 |  
 |  allow_screensaver
 |      BooleanProperty(defaultvalue=True, **kw)
 |      Property that represents only a boolean value.
 |      
 |          :Parameters:
 |              `defaultvalue`: boolean
 |                  Specifies the default value of the property.
 |  
 |  borderless
 |      BooleanProperty(defaultvalue=True, **kw)
 |      Property that represents only a boolean value.
 |      
 |          :Parameters:
 |              `defaultvalue`: boolean
 |                  Specifies the default value of the property.
 |  
 |  canvas
 |      ObjectProperty(defaultvalue=None, rebind=False, **kw)
 |      Property that represents a Python object.
 |      
 |          :Parameters:
 |              `defaultvalue`: object type
 |                  Specifies the default value of the property.
 |              `rebind`: bool, defaults to False
 |                  Whether kv rules using this object as an intermediate attribute
 |                  in a kv rule, will update the bound property when this object
 |                  changes.
 |      
 |                  That is the standard behavior is that if there's a kv rule
 |                  ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are
 |                  properties with ``rebind`` ``False`` and ``d`` is a
 |                  :class:`StringProperty`. Then when the rule is applied, ``text``
 |                  becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,
 |                  ``text`` still remains bound to ``d``. Furthermore, if any of them
 |                  were ``None`` when the rule was initially evaluated, e.g. ``b`` was
 |                  ``None``; then ``text`` is bound to ``b`` and will not become bound
 |                  to ``d`` even when ``b`` is changed to not be ``None``.
 |      
 |                  By setting ``rebind`` to ``True``, however, the rule will be
 |                  re-evaluated and all the properties rebound when that intermediate
 |                  property changes. E.g. in the example above, whenever ``b`` changes
 |                  or becomes not ``None`` if it was ``None`` before, ``text`` is
 |                  evaluated again and becomes rebound to ``d``. The overall result is
 |                  that ``text`` is now bound to all the properties among ``a``,
 |                  ``b``, or ``c`` that have ``rebind`` set to ``True``.
 |              `\*\*kwargs`: a list of keyword arguments
 |                  `baseclass`
 |                      If kwargs includes a `baseclass` argument, this value will be
 |                      used for validation: `isinstance(value, kwargs['baseclass'])`.
 |      
 |          .. warning::
 |      
 |              To mark the property as changed, you must reassign a new python object.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.7.0
 |      
 |              `baseclass` parameter added.
 |  
 |  center
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  children
 |      ListProperty(defaultvalue=0, **kw)
 |      Property that represents a list.
 |      
 |          :Parameters:
 |              `defaultvalue`: list, defaults to []
 |                  Specifies the default value of the property.
 |      
 |          .. warning::
 |      
 |              When assigning a list to a :class:`ListProperty`, the list stored in
 |              the property is a shallow copy of the list and not the original list. This can
 |              be demonstrated with the following example::
 |      
 |                  >>> class MyWidget(Widget):
 |                  >>>     my_list = ListProperty([])
 |      
 |                  >>> widget = MyWidget()
 |                  >>> my_list = [1, 5, {'hi': 'hello'}]
 |                  >>> widget.my_list = my_list
 |                  >>> print(my_list is widget.my_list)
 |                  False
 |                  >>> my_list.append(10)
 |                  >>> print(my_list, widget.my_list)
 |                  [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]
 |      
 |              However, changes to nested levels will affect the property as well,
 |              since the property uses a shallow copy of my_list.
 |      
 |                  >>> my_list[2]['hi'] = 'bye'
 |                  >>> print(my_list, widget.my_list)
 |                  [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]
 |  
 |  clearcolor
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  focus
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  fullscreen
 |      OptionProperty(*largs, **kw)
 |      Property that represents a string from a predefined list of valid
 |          options.
 |      
 |          If the string set in the property is not in the list of valid options
 |          (passed at property creation time), a ValueError exception will be raised.
 |      
 |          :Parameters:
 |              `default`: any valid type in the list of options
 |                  Specifies the default value of the property.
 |              `\*\*kwargs`: a list of keyword arguments
 |                  Should include an `options` parameter specifying a list (not tuple)
 |                  of valid options.
 |      
 |          For example::
 |      
 |              class MyWidget(Widget):
 |                  state = OptionProperty("None", options=["On", "Off", "None"])
 |  
 |  height
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  icon
 |      StringProperty(defaultvalue='', **kw)
 |      Property that represents a string value.
 |      
 |          :Parameters:
 |              `defaultvalue`: string, defaults to ''
 |                  Specifies the default value of the property.
 |  
 |  keyboard_height
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  keyboard_padding
 |      NumericProperty(defaultvalue=0, **kw)
 |      Property that represents a numeric value.
 |      
 |          :Parameters:
 |              `defaultvalue`: int or float, defaults to 0
 |                  Specifies the default value of the property.
 |      
 |          >>> wid = Widget()
 |          >>> wid.x = 42
 |          >>> print(wid.x)
 |          42
 |          >>> wid.x = "plop"
 |           Traceback (most recent call last):
 |             File "<stdin>", line 1, in <module>
 |             File "properties.pyx", line 93, in kivy.properties.Property.__set__
 |             File "properties.pyx", line 111, in kivy.properties.Property.set
 |             File "properties.pyx", line 159, in kivy.properties.NumericProperty.check
 |           ValueError: NumericProperty accept only int/float
 |      
 |          .. versionchanged:: 1.4.1
 |              NumericProperty can now accept custom text and tuple value to indicate a
 |              type, like "in", "pt", "px", "cm", "mm", in the format: '10pt' or (10,
 |              'pt').
 |  
 |  left
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  minimum_height
 |      NumericProperty(defaultvalue=0, **kw)
 |      Property that represents a numeric value.
 |      
 |          :Parameters:
 |              `defaultvalue`: int or float, defaults to 0
 |                  Specifies the default value of the property.
 |      
 |          >>> wid = Widget()
 |          >>> wid.x = 42
 |          >>> print(wid.x)
 |          42
 |          >>> wid.x = "plop"
 |           Traceback (most recent call last):
 |             File "<stdin>", line 1, in <module>
 |             File "properties.pyx", line 93, in kivy.properties.Property.__set__
 |             File "properties.pyx", line 111, in kivy.properties.Property.set
 |             File "properties.pyx", line 159, in kivy.properties.NumericProperty.check
 |           ValueError: NumericProperty accept only int/float
 |      
 |          .. versionchanged:: 1.4.1
 |              NumericProperty can now accept custom text and tuple value to indicate a
 |              type, like "in", "pt", "px", "cm", "mm", in the format: '10pt' or (10,
 |              'pt').
 |  
 |  minimum_width
 |      NumericProperty(defaultvalue=0, **kw)
 |      Property that represents a numeric value.
 |      
 |          :Parameters:
 |              `defaultvalue`: int or float, defaults to 0
 |                  Specifies the default value of the property.
 |      
 |          >>> wid = Widget()
 |          >>> wid.x = 42
 |          >>> print(wid.x)
 |          42
 |          >>> wid.x = "plop"
 |           Traceback (most recent call last):
 |             File "<stdin>", line 1, in <module>
 |             File "properties.pyx", line 93, in kivy.properties.Property.__set__
 |             File "properties.pyx", line 111, in kivy.properties.Property.set
 |             File "properties.pyx", line 159, in kivy.properties.NumericProperty.check
 |           ValueError: NumericProperty accept only int/float
 |      
 |          .. versionchanged:: 1.4.1
 |              NumericProperty can now accept custom text and tuple value to indicate a
 |              type, like "in", "pt", "px", "cm", "mm", in the format: '10pt' or (10,
 |              'pt').
 |  
 |  modifiers
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  mouse_pos
 |      ObjectProperty(defaultvalue=None, rebind=False, **kw)
 |      Property that represents a Python object.
 |      
 |          :Parameters:
 |              `defaultvalue`: object type
 |                  Specifies the default value of the property.
 |              `rebind`: bool, defaults to False
 |                  Whether kv rules using this object as an intermediate attribute
 |                  in a kv rule, will update the bound property when this object
 |                  changes.
 |      
 |                  That is the standard behavior is that if there's a kv rule
 |                  ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are
 |                  properties with ``rebind`` ``False`` and ``d`` is a
 |                  :class:`StringProperty`. Then when the rule is applied, ``text``
 |                  becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,
 |                  ``text`` still remains bound to ``d``. Furthermore, if any of them
 |                  were ``None`` when the rule was initially evaluated, e.g. ``b`` was
 |                  ``None``; then ``text`` is bound to ``b`` and will not become bound
 |                  to ``d`` even when ``b`` is changed to not be ``None``.
 |      
 |                  By setting ``rebind`` to ``True``, however, the rule will be
 |                  re-evaluated and all the properties rebound when that intermediate
 |                  property changes. E.g. in the example above, whenever ``b`` changes
 |                  or becomes not ``None`` if it was ``None`` before, ``text`` is
 |                  evaluated again and becomes rebound to ``d``. The overall result is
 |                  that ``text`` is now bound to all the properties among ``a``,
 |                  ``b``, or ``c`` that have ``rebind`` set to ``True``.
 |              `\*\*kwargs`: a list of keyword arguments
 |                  `baseclass`
 |                      If kwargs includes a `baseclass` argument, this value will be
 |                      used for validation: `isinstance(value, kwargs['baseclass'])`.
 |      
 |          .. warning::
 |      
 |              To mark the property as changed, you must reassign a new python object.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.7.0
 |      
 |              `baseclass` parameter added.
 |  
 |  parent
 |      ObjectProperty(defaultvalue=None, rebind=False, **kw)
 |      Property that represents a Python object.
 |      
 |          :Parameters:
 |              `defaultvalue`: object type
 |                  Specifies the default value of the property.
 |              `rebind`: bool, defaults to False
 |                  Whether kv rules using this object as an intermediate attribute
 |                  in a kv rule, will update the bound property when this object
 |                  changes.
 |      
 |                  That is the standard behavior is that if there's a kv rule
 |                  ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are
 |                  properties with ``rebind`` ``False`` and ``d`` is a
 |                  :class:`StringProperty`. Then when the rule is applied, ``text``
 |                  becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,
 |                  ``text`` still remains bound to ``d``. Furthermore, if any of them
 |                  were ``None`` when the rule was initially evaluated, e.g. ``b`` was
 |                  ``None``; then ``text`` is bound to ``b`` and will not become bound
 |                  to ``d`` even when ``b`` is changed to not be ``None``.
 |      
 |                  By setting ``rebind`` to ``True``, however, the rule will be
 |                  re-evaluated and all the properties rebound when that intermediate
 |                  property changes. E.g. in the example above, whenever ``b`` changes
 |                  or becomes not ``None`` if it was ``None`` before, ``text`` is
 |                  evaluated again and becomes rebound to ``d``. The overall result is
 |                  that ``text`` is now bound to all the properties among ``a``,
 |                  ``b``, or ``c`` that have ``rebind`` set to ``True``.
 |              `\*\*kwargs`: a list of keyword arguments
 |                  `baseclass`
 |                      If kwargs includes a `baseclass` argument, this value will be
 |                      used for validation: `isinstance(value, kwargs['baseclass'])`.
 |      
 |          .. warning::
 |      
 |              To mark the property as changed, you must reassign a new python object.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.7.0
 |      
 |              `baseclass` parameter added.
 |  
 |  position
 |      OptionProperty(*largs, **kw)
 |      Property that represents a string from a predefined list of valid
 |          options.
 |      
 |          If the string set in the property is not in the list of valid options
 |          (passed at property creation time), a ValueError exception will be raised.
 |      
 |          :Parameters:
 |              `default`: any valid type in the list of options
 |                  Specifies the default value of the property.
 |              `\*\*kwargs`: a list of keyword arguments
 |                  Should include an `options` parameter specifying a list (not tuple)
 |                  of valid options.
 |      
 |          For example::
 |      
 |              class MyWidget(Widget):
 |                  state = OptionProperty("None", options=["On", "Off", "None"])
 |  
 |  render_context
 |      ObjectProperty(defaultvalue=None, rebind=False, **kw)
 |      Property that represents a Python object.
 |      
 |          :Parameters:
 |              `defaultvalue`: object type
 |                  Specifies the default value of the property.
 |              `rebind`: bool, defaults to False
 |                  Whether kv rules using this object as an intermediate attribute
 |                  in a kv rule, will update the bound property when this object
 |                  changes.
 |      
 |                  That is the standard behavior is that if there's a kv rule
 |                  ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are
 |                  properties with ``rebind`` ``False`` and ``d`` is a
 |                  :class:`StringProperty`. Then when the rule is applied, ``text``
 |                  becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,
 |                  ``text`` still remains bound to ``d``. Furthermore, if any of them
 |                  were ``None`` when the rule was initially evaluated, e.g. ``b`` was
 |                  ``None``; then ``text`` is bound to ``b`` and will not become bound
 |                  to ``d`` even when ``b`` is changed to not be ``None``.
 |      
 |                  By setting ``rebind`` to ``True``, however, the rule will be
 |                  re-evaluated and all the properties rebound when that intermediate
 |                  property changes. E.g. in the example above, whenever ``b`` changes
 |                  or becomes not ``None`` if it was ``None`` before, ``text`` is
 |                  evaluated again and becomes rebound to ``d``. The overall result is
 |                  that ``text`` is now bound to all the properties among ``a``,
 |                  ``b``, or ``c`` that have ``rebind`` set to ``True``.
 |              `\*\*kwargs`: a list of keyword arguments
 |                  `baseclass`
 |                      If kwargs includes a `baseclass` argument, this value will be
 |                      used for validation: `isinstance(value, kwargs['baseclass'])`.
 |      
 |          .. warning::
 |      
 |              To mark the property as changed, you must reassign a new python object.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.7.0
 |      
 |              `baseclass` parameter added.
 |  
 |  rotation
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  shape_color_key
 |      ListProperty(defaultvalue=0, **kw)
 |      Property that represents a list.
 |      
 |          :Parameters:
 |              `defaultvalue`: list, defaults to []
 |                  Specifies the default value of the property.
 |      
 |          .. warning::
 |      
 |              When assigning a list to a :class:`ListProperty`, the list stored in
 |              the property is a shallow copy of the list and not the original list. This can
 |              be demonstrated with the following example::
 |      
 |                  >>> class MyWidget(Widget):
 |                  >>>     my_list = ListProperty([])
 |      
 |                  >>> widget = MyWidget()
 |                  >>> my_list = [1, 5, {'hi': 'hello'}]
 |                  >>> widget.my_list = my_list
 |                  >>> print(my_list is widget.my_list)
 |                  False
 |                  >>> my_list.append(10)
 |                  >>> print(my_list, widget.my_list)
 |                  [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]
 |      
 |              However, changes to nested levels will affect the property as well,
 |              since the property uses a shallow copy of my_list.
 |      
 |                  >>> my_list[2]['hi'] = 'bye'
 |                  >>> print(my_list, widget.my_list)
 |                  [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]
 |  
 |  shape_cutoff
 |      BooleanProperty(defaultvalue=True, **kw)
 |      Property that represents only a boolean value.
 |      
 |          :Parameters:
 |              `defaultvalue`: boolean
 |                  Specifies the default value of the property.
 |  
 |  shape_image
 |      StringProperty(defaultvalue='', **kw)
 |      Property that represents a string value.
 |      
 |          :Parameters:
 |              `defaultvalue`: string, defaults to ''
 |                  Specifies the default value of the property.
 |  
 |  shape_mode
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  shaped
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  show_cursor
 |      BooleanProperty(defaultvalue=True, **kw)
 |      Property that represents only a boolean value.
 |      
 |          :Parameters:
 |              `defaultvalue`: boolean
 |                  Specifies the default value of the property.
 |  
 |  size
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  softinput_mode
 |      OptionProperty(*largs, **kw)
 |      Property that represents a string from a predefined list of valid
 |          options.
 |      
 |          If the string set in the property is not in the list of valid options
 |          (passed at property creation time), a ValueError exception will be raised.
 |      
 |          :Parameters:
 |              `default`: any valid type in the list of options
 |                  Specifies the default value of the property.
 |              `\*\*kwargs`: a list of keyword arguments
 |                  Should include an `options` parameter specifying a list (not tuple)
 |                  of valid options.
 |      
 |          For example::
 |      
 |              class MyWidget(Widget):
 |                  state = OptionProperty("None", options=["On", "Off", "None"])
 |  
 |  system_size
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  title
 |      StringProperty(defaultvalue='', **kw)
 |      Property that represents a string value.
 |      
 |          :Parameters:
 |              `defaultvalue`: string, defaults to ''
 |                  Specifies the default value of the property.
 |  
 |  top
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  width
 |      AliasProperty(getter, setter=None, rebind=False, **kwargs)
 |      Create a property with a custom getter and setter.
 |      
 |          If you don't find a Property class that fits to your needs, you can make
 |          your own by creating custom Python getter and setter methods.
 |      
 |          Example from kivy/uix/widget.py where `x` and `width` are instances of
 |          :class:`NumericProperty`::
 |      
 |              def get_right(self):
 |                  return self.x + self.width
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |              right = AliasProperty(get_right, set_right, bind=['x', 'width'])
 |      
 |          If `x` were a non Kivy property then you have to return `True` from setter
 |          to dispatch new value of `right`::
 |      
 |              def set_right(self, value):
 |                  self.x = value - self.width
 |                  return True
 |      
 |          Usually `bind` list should contain all Kivy properties used in getter
 |          method. If you return `True` it will cause a dispatch which one should do
 |          when the property value has changed, but keep in mind that the property
 |          could already have dispatched the changed value if a kivy property the
 |          alias property is bound was set in the setter, causing a second dispatch
 |          if the setter returns `True`.
 |      
 |          If you want to cache the value returned by getter then pass `cache=True`.
 |          This way getter will only be called if new value is set or one of the
 |          binded properties changes. In both cases new value of alias property will
 |          be cached again.
 |      
 |          To make property readonly pass `None` as setter. This way `AttributeError`
 |          will be raised on every set attempt::
 |      
 |              right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)
 |      
 |          :Parameters:
 |              `getter`: function
 |                  Function to use as a property getter.
 |              `setter`: function
 |                  Function to use as a property setter. Callbacks bound to the
 |                  alias property won't be called when the property is set (e.g.
 |                  `right = 10`), unless the setter returns `True`.
 |              `bind`: list/tuple
 |                  Properties to observe for changes as property name strings.
 |                  Changing values of this properties will dispatch value of the
 |                  alias property.
 |              `cache`: boolean
 |                  If `True`, the value will be cached until one of the binded
 |                  elements changes or if setter returns `True`.
 |              `rebind`: bool, defaults to `False`
 |                  See :class:`ObjectProperty` for details.
 |      
 |          .. versionchanged:: 1.9.0
 |              `rebind` has been introduced.
 |      
 |          .. versionchanged:: 1.4.0
 |              Parameter `cache` added.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from kivy.core.window.WindowBase:
 |  
 |  __events__ = ('on_draw', 'on_flip', 'on_rotate', 'on_resize', 'on_move...
 |  
 |  gl_backends_allowed = []
 |  
 |  gl_backends_ignored = []
 |  
 |  keyboard_anim_args = {'d': 0.5, 't': 'in_out_quart'}
 |  
 |  trigger_create_window = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from kivy._event.EventDispatcher:
 |  
 |  __reduce__ = __reduce_cython__(...)
 |      EventDispatcher.__reduce_cython__(self)
 |  
 |  __setstate__ = __setstate_cython__(...)
 |      EventDispatcher.__setstate_cython__(self, __pyx_state)
 |  
 |  apply_property(...)
 |      EventDispatcher.apply_property(self, **kwargs)
 |      Adds properties at runtime to the class. The function accepts
 |              keyword arguments of the form `prop_name=prop`, where `prop` is a
 |              :class:`Property` instance and `prop_name` is the name of the attribute
 |              of the property.
 |      
 |              .. versionadded:: 1.9.1
 |      
 |              .. warning::
 |      
 |                  This method is not recommended for common usage because you should
 |                  declare the properties in your class instead of using this method.
 |      
 |              For example::
 |      
 |                  >>> print(wid.property('sticks', quiet=True))
 |                  None
 |                  >>> wid.apply_property(sticks=ObjectProperty(55, max=10))
 |                  >>> print(wid.property('sticks', quiet=True))
 |                  <kivy.properties.ObjectProperty object at 0x04303130>
 |  
 |  bind(...)
 |      EventDispatcher.bind(self, **kwargs)
 |      Bind an event type or a property to a callback.
 |      
 |              Usage::
 |      
 |                  # With properties
 |                  def my_x_callback(obj, value):
 |                      print('on object', obj, 'x changed to', value)
 |                  def my_width_callback(obj, value):
 |                      print('on object', obj, 'width changed to', value)
 |                  self.bind(x=my_x_callback, width=my_width_callback)
 |      
 |                  # With event
 |                  def my_press_callback(obj):
 |                      print('event on object', obj)
 |                  self.bind(on_press=my_press_callback)
 |      
 |              In general, property callbacks are called with 2 arguments (the
 |              object and the property's new value) and event callbacks with
 |              one argument (the object). The example above illustrates this.
 |      
 |              The following example demonstrates various ways of using the bind
 |              function in a complete application::
 |      
 |                  from kivy.uix.boxlayout import BoxLayout
 |                  from kivy.app import App
 |                  from kivy.uix.button import Button
 |                  from functools import partial
 |      
 |      
 |                  class DemoBox(BoxLayout):
 |                      """
 |                      This class demonstrates various techniques that can be used for binding to
 |                      events. Although parts could me made more optimal, advanced Python concepts
 |                      are avoided for the sake of readability and clarity.
 |                      """
 |                      def __init__(self, **kwargs):
 |                          super(DemoBox, self).__init__(**kwargs)
 |                          self.orientation = "vertical"
 |      
 |                          # We start with binding to a normal event. The only argument
 |                          # passed to the callback is the object which we have bound to.
 |                          btn = Button(text="Normal binding to event")
 |                          btn.bind(on_press=self.on_event)
 |      
 |                          # Next, we bind to a standard property change event. This typically
 |                          # passes 2 arguments: the object and the value
 |                          btn2 = Button(text="Normal binding to a property change")
 |                          btn2.bind(state=self.on_property)
 |      
 |                          # Here we use anonymous functions (a.k.a lambdas) to perform binding.
 |                          # Their advantage is that you can avoid declaring new functions i.e.
 |                          # they offer a concise way to "redirect" callbacks.
 |                          btn3 = Button(text="Using anonymous functions.")
 |                          btn3.bind(on_press=lambda x: self.on_event(None))
 |      
 |                          # You can also declare a function that accepts a variable number of
 |                          # positional and keyword arguments and use introspection to determine
 |                          # what is being passed in. This is very handy for debugging as well
 |                          # as function re-use. Here, we use standard event binding to a function
 |                          # that accepts optional positional and keyword arguments.
 |                          btn4 = Button(text="Use a flexible function")
 |                          btn4.bind(on_press=self.on_anything)
 |      
 |                          # Lastly, we show how to use partial functions. They are sometimes
 |                          # difficult to grasp, but provide a very flexible and powerful way to
 |                          # reuse functions.
 |                          btn5 = Button(text="Using partial functions. For hardcores.")
 |                          btn5.bind(on_press=partial(self.on_anything, "1", "2", monthy="python"))
 |      
 |                          for but in [btn, btn2, btn3, btn4, btn5]:
 |                              self.add_widget(but)
 |      
 |                      def on_event(self, obj):
 |                          print("Typical event from", obj)
 |      
 |                      def on_property(self, obj, value):
 |                          print("Typical property change from", obj, "to", value)
 |      
 |                      def on_anything(self, *args, **kwargs):
 |                          print('The flexible function has *args of', str(args),
 |                              "and **kwargs of", str(kwargs))
 |      
 |      
 |                  class DemoApp(App):
 |                      def build(self):
 |                          return DemoBox()
 |      
 |                  if __name__ == "__main__":
 |                      DemoApp().run()
 |      
 |              When binding a function to an event or property, a
 |              :class:`kivy.weakmethod.WeakMethod` of the callback is saved, and
 |              when dispatching the callback is removed if the callback reference
 |              becomes invalid.
 |      
 |              If a callback has already been bound to a given event or property,
 |              it won't be added again.
 |  
 |  create_property(...)
 |      EventDispatcher.create_property(self, str name, value=None, *largs, **kwargs)
 |      Create a new property at runtime.
 |      
 |              .. versionadded:: 1.0.9
 |      
 |              .. versionchanged:: 1.8.0
 |                  `value` parameter added, can be used to set the default value of the
 |                  property. Also, the type of the value is used to specialize the
 |                  created property.
 |      
 |              .. versionchanged:: 1.9.0
 |                  In the past, if `value` was of type `bool`, a `NumericProperty`
 |                  would be created, now a `BooleanProperty` is created.
 |      
 |                  Also, now and positional and keyword arguments are passed to the
 |                  property when created.
 |      
 |              .. warning::
 |      
 |                  This function is designed for the Kivy language, don't use it in
 |                  your code. You should declare the property in your class instead of
 |                  using this method.
 |      
 |              :Parameters:
 |                  `name`: string
 |                      Name of the property
 |                  `value`: object, optional
 |                      Default value of the property. Type is also used for creating
 |                      more appropriate property types. Defaults to None.
 |      
 |      
 |              ::
 |      
 |                  >>> mywidget = Widget()
 |                  >>> mywidget.create_property('custom')
 |                  >>> mywidget.custom = True
 |                  >>> print(mywidget.custom)
 |                  True
 |  
 |  dispatch(...)
 |      EventDispatcher.dispatch(self, basestring event_type, *largs, **kwargs)
 |      Dispatch an event across all the handlers added in bind/fbind().
 |              As soon as a handler returns True, the dispatching stops.
 |      
 |              The function collects all the positional and keyword arguments and
 |              passes them on to the handlers.
 |      
 |              .. note::
 |                  The handlers are called in reverse order than they were registered
 |                  with :meth:`bind`.
 |      
 |              :Parameters:
 |                  `event_type`: basestring
 |                      the event name to dispatch.
 |      
 |              .. versionchanged:: 1.9.0
 |                  Keyword arguments collection and forwarding was added. Before, only
 |                  positional arguments would be collected and forwarded.
 |  
 |  dispatch_children(...)
 |      EventDispatcher.dispatch_children(self, basestring event_type, *largs, **kwargs)
 |  
 |  dispatch_generic(...)
 |      EventDispatcher.dispatch_generic(self, basestring event_type, *largs, **kwargs)
 |  
 |  events(...)
 |      EventDispatcher.events(self)
 |      Return all the events in the class. Can be used for introspection.
 |      
 |              .. versionadded:: 1.8.0
 |  
 |  fbind(...)
 |      EventDispatcher.fbind(self, name, func, *largs, **kwargs)
 |      A method for advanced, and typically faster binding. This method is
 |              different than :meth:`bind` and is meant for more advanced users and
 |              internal usage. It can be used as long as the following points are heeded.
 |      
 |              #. As opposed to :meth:`bind`, it does not check that this function and
 |                 largs/kwargs has not been bound before to this name. So binding
 |                 the same callback multiple times will just keep adding it.
 |              #. Although :meth:`bind` creates a :class:`WeakMethod` of the callback when
 |                 binding to an event or property, this method stores the callback
 |                 directly, unless a keyword argument `ref` with value True is provided
 |                 and then a :class:`WeakMethod` is saved.
 |                 This is useful when there's no risk of a memory leak by storing the
 |                 callback directly.
 |              #. This method returns a unique positive number if `name` was found and
 |                 bound, and `0`, otherwise. It does not raise an exception, like
 |                 :meth:`bind` if the property `name` is not found. If not zero,
 |                 the uid returned is unique to this `name` and callback and can be
 |                 used with :meth:`unbind_uid` for unbinding.
 |      
 |      
 |              When binding a callback with largs and/or kwargs, :meth:`funbind`
 |              must be used for unbinding. If no largs and kwargs are provided,
 |              :meth:`unbind` may be used as well. :meth:`unbind_uid` can be used in
 |              either case.
 |      
 |              This method passes on any caught positional and/or keyword arguments to
 |              the callback, removing the need to call partial. When calling the
 |              callback the expended largs are passed on followed by instance/value
 |              (just instance for kwargs) followed by expended kwargs.
 |      
 |              Following is an example of usage similar to the example in
 |              :meth:`bind`::
 |      
 |                  class DemoBox(BoxLayout):
 |      
 |                      def __init__(self, **kwargs):
 |                          super(DemoBox, self).__init__(**kwargs)
 |                          self.orientation = "vertical"
 |      
 |                          btn = Button(text="Normal binding to event")
 |                          btn.fbind('on_press', self.on_event)
 |      
 |                          btn2 = Button(text="Normal binding to a property change")
 |                          btn2.fbind('state', self.on_property)
 |      
 |                          btn3 = Button(text="A: Using function with args.")
 |                          btn3.fbind('on_press', self.on_event_with_args, 'right',
 |                                         tree='birch', food='apple')
 |      
 |                          btn4 = Button(text="Unbind A.")
 |                          btn4.fbind('on_press', self.unbind_a, btn3)
 |      
 |                          btn5 = Button(text="Use a flexible function")
 |                          btn5.fbind('on_press', self.on_anything)
 |      
 |                          btn6 = Button(text="B: Using flexible functions with args. For hardcores.")
 |                          btn6.fbind('on_press', self.on_anything, "1", "2", monthy="python")
 |      
 |                          btn7 = Button(text="Force dispatch B with different params")
 |                          btn7.fbind('on_press', btn6.dispatch, 'on_press', 6, 7, monthy="other python")
 |      
 |                          for but in [btn, btn2, btn3, btn4, btn5, btn6, btn7]:
 |                              self.add_widget(but)
 |      
 |                      def on_event(self, obj):
 |                          print("Typical event from", obj)
 |      
 |                      def on_event_with_args(self, side, obj, tree=None, food=None):
 |                          print("Event with args", obj, side, tree, food)
 |      
 |                      def on_property(self, obj, value):
 |                          print("Typical property change from", obj, "to", value)
 |      
 |                      def on_anything(self, *args, **kwargs):
 |                          print('The flexible function has *args of', str(args),
 |                              "and **kwargs of", str(kwargs))
 |                          return True
 |      
 |                      def unbind_a(self, btn, event):
 |                          btn.funbind('on_press', self.on_event_with_args, 'right',
 |                                          tree='birch', food='apple')
 |      
 |              .. note::
 |      
 |                  Since the kv lang uses this method to bind, one has to implement
 |                  this method, instead of :meth:`bind` when creating a non
 |                  :class:`EventDispatcher` based class used with the kv lang. See
 |                  :class:`Observable` for an example.
 |      
 |              .. versionadded:: 1.9.0
 |      
 |              .. versionchanged:: 1.9.1
 |                  The `ref` keyword argument has been added.
 |  
 |  funbind(...)
 |      EventDispatcher.funbind(self, name, func, *largs, **kwargs)
 |      Similar to :meth:`fbind`.
 |      
 |              When unbinding, :meth:`unbind` will unbind all callbacks that match the
 |              callback, while this method will only unbind the first.
 |      
 |              To unbind, the same positional and keyword arguments passed to
 |              :meth:`fbind` must be passed on to funbind.
 |      
 |              .. note::
 |      
 |                  It is safe to use :meth:`funbind` to unbind a function bound with
 |                  :meth:`bind` as long as no keyword and positional arguments are
 |                  provided to :meth:`funbind`.
 |      
 |              .. versionadded:: 1.9.0
 |  
 |  get_property_observers(...)
 |      EventDispatcher.get_property_observers(self, name, args=False)
 |      Returns a list of methods that are bound to the property/event
 |             passed as the *name* argument::
 |      
 |                 widget_instance.get_property_observers('on_release')
 |      
 |             :Parameters:
 |      
 |                 `name`: str
 |                     The name of the event or property.
 |                 `args`: bool
 |                     Whether to return the bound args. To keep compatibility,
 |                     only the callback functions and not their provided args will
 |                     be returned in the list when `args` is False.
 |      
 |                     If True, each element in the list is a 5-tuple of
 |                     `(callback, largs, kwargs, is_ref, uid)`, where `is_ref` indicates
 |                     whether `callback` is a weakref, and `uid` is the uid given by
 |                     :meth:`fbind`, or None if :meth:`bind` was used. Defaults to `False`.
 |      
 |             :Returns:
 |                 The list of bound callbacks. See `args` for details.
 |      
 |             .. versionadded:: 1.8.0
 |      
 |             .. versionchanged:: 1.9.0
 |                 `args` has been added.
 |  
 |  getter(...)
 |      EventDispatcher.getter(self, name)
 |      Return the getter of a property.
 |      
 |              .. versionadded:: 1.0.9
 |  
 |  is_event_type(...)
 |      EventDispatcher.is_event_type(self, basestring event_type)
 |      Return True if the event_type is already registered.
 |      
 |              .. versionadded:: 1.0.4
 |  
 |  properties(...)
 |      EventDispatcher.properties(self) -> dict
 |      Return all the properties in the class in a dictionary of
 |              key/property class. Can be used for introspection.
 |      
 |              .. versionadded:: 1.0.9
 |  
 |  property(...)
 |      EventDispatcher.property(self, name, quiet=False)
 |      Get a property instance from the property name. If quiet is True,
 |              None is returned instead of raising an exception when `name` is not a
 |              property. Defaults to `False`.
 |      
 |              .. versionadded:: 1.0.9
 |      
 |              :return:
 |      
 |                  A :class:`~kivy.properties.Property` derived instance
 |                  corresponding to the name.
 |      
 |              .. versionchanged:: 1.9.0
 |                  quiet was added.
 |  
 |  register_event_type(...)
 |      EventDispatcher.register_event_type(self, basestring event_type)
 |      Register an event type with the dispatcher.
 |      
 |              Registering event types allows the dispatcher to validate event handler
 |              names as they are attached and to search attached objects for suitable
 |              handlers. Each event type declaration must:
 |      
 |                  1. start with the prefix `on_`.
 |                  2. have a default handler in the class.
 |      
 |              Example of creating a custom event::
 |      
 |                  class MyWidget(Widget):
 |                      def __init__(self, **kwargs):
 |                          super(MyWidget, self).__init__(**kwargs)
 |                          self.register_event_type('on_swipe')
 |      
 |                      def on_swipe(self):
 |                          pass
 |      
 |                  def on_swipe_callback(*largs):
 |                      print('my swipe is called', largs)
 |                  w = MyWidget()
 |                  w.dispatch('on_swipe')
 |  
 |  setter(...)
 |      EventDispatcher.setter(self, name)
 |      Return the setter of a property. Use: instance.setter('name').
 |              The setter is a convenient callback function useful if you want
 |              to directly bind one property to another.
 |              It returns a partial function that will accept
 |              (obj, value) args and results in the property 'name' of instance
 |              being set to value.
 |      
 |              .. versionadded:: 1.0.9
 |      
 |              For example, to bind number2 to number1 in python you would do::
 |      
 |                  class ExampleWidget(Widget):
 |                      number1 = NumericProperty(None)
 |                      number2 = NumericProperty(None)
 |      
 |                      def __init__(self, **kwargs):
 |                          super(ExampleWidget, self).__init__(**kwargs)
 |                          self.bind(number1=self.setter('number2'))
 |      
 |              This is equivalent to kv binding::
 |      
 |                  <ExampleWidget>:
 |                      number2: self.number1
 |  
 |  unbind(...)
 |      EventDispatcher.unbind(self, **kwargs)
 |      Unbind properties from callback functions with similar usage as
 |              :meth:`bind`.
 |      
 |              If a callback has been bound to a given event or property multiple
 |              times, only the first occurrence will be unbound.
 |      
 |              .. note::
 |      
 |                  It is safe to use :meth:`unbind` on a function bound with :meth:`fbind`
 |                  as long as that function was originally bound without any keyword and
 |                  positional arguments. Otherwise, the function will fail to be unbound
 |                  and you should use :meth:`funbind` instead.
 |  
 |  unbind_uid(...)
 |      EventDispatcher.unbind_uid(self, name, uid)
 |      Uses the uid returned by :meth:`fbind` to unbind the callback.
 |      
 |              This method is much more efficient than :meth:`funbind`. If `uid`
 |              evaluates to False (e.g. 0) a `ValueError` is raised. Also, only
 |              callbacks bound with :meth:`fbind` can be unbound with this method.
 |      
 |              Since each call to :meth:`fbind` will generate a unique `uid`,
 |              only one callback will be removed. If `uid` is not found among the
 |              callbacks, no error is raised.
 |      
 |              E.g.::
 |      
 |                  btn6 = Button(text="B: Using flexible functions with args. For hardcores.")
 |                  uid = btn6.fbind('on_press', self.on_anything, "1", "2", monthy="python")
 |                  if not uid:
 |                      raise Exception('Binding failed').
 |                  ...
 |                  btn6.unbind_uid('on_press', uid)
 |      
 |              .. versionadded:: 1.9.0
 |  
 |  unregister_event_types(...)
 |      EventDispatcher.unregister_event_types(self, basestring event_type)
 |      Unregister an event type in the dispatcher.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from kivy._event.EventDispatcher:
 |  
 |  proxy_ref
 |      Default implementation of proxy_ref, returns self.
 |      .. versionadded:: 1.9.0
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from kivy._event.EventDispatcher:
 |  
 |  __pyx_vtable__ = <capsule object NULL>
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from kivy._event.ObjectWithUid:
 |  
 |  uid
